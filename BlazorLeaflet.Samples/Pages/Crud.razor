@page "/crud"

@using BlazorLeaflet.Samples.Data
@inject BlazorLeaflet.Samples.Data.EczaneServices service
@using BlazorLeaflet.Models
@using BlazorLeaflet.Models.Events
@inject IJSRuntime jsRuntime


<div class="container">
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Eczane Id</th>
                    <th>Eczane Adı</th>
                    <th>Bulundugu Sehir</th>
                    <th>Lat</th>
                    <th>Long</th>
                    <th>Eczane Sil</th>
                </tr>
            </thead>
            <tbody>
                @if (EczaneList.Any())
                {
                    @foreach (var eczane in EczaneList)
                    {
                        <tr @onclick="(() => SetEczaneForUpdate(eczane))">
                            <td>@eczane.Id</td>
                            <td>@eczane.Name</td>
                            <td>@eczane.Sehir</td>
                            <td>@eczane.Lat</td>
                            <td>@eczane.Long</td>
                            <td><button class="btn btn-danger" @onclick="(() => DeleteEczane(eczane))">Sil</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>Gorunurde eczane bulunmamaktadır</strong></td></tr>
                }
            </tbody>
        </table>
    </div>
    <br />
    <div>
        <button class="btn btn-dark" @onclick="@(e=>RotaAyar("ilk"))">@("<<")</button>
        <button class="btn btn-dark" @onclick="@(e=>RotaAyar("önceki"))">Önceki</button>

        @for (int i = 0; i < TotalPages; i++)
        {
            var pageNumber = i;
            <button class="btn @(CurrentPage==pageNumber? "btn-danger":"btn-info")" @onclick="@(e=>UpdateEczaneList(pageNumber))">@(i+1)</button>
        }

        <button class="btn btn-dark" @onclick="@(e=>RotaAyar("sonraki"))">Sonraki</button>
        <button class="btn btn-dark" @onclick="@(e=>RotaAyar("son"))">@(">>")</button>
    </div>

    <div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">
            <div class="p-3 mb-3 bg-primary text-white text-center">Yeni Eczane Ekle</div>
            <EditForm Model="@NewEczane" OnValidSubmit="AddNewEczane">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="name">Eczane Adı</label>
                    <input type="text" id="name" class="form-control" @bind-value="@NewEczane.Name" />
                    <ValidationMessage For="@(()=>NewEczane.Name)" />
                </div>
                <div class="form-group">
                    <label for="sehir">Bulundugu Sehir</label>
                    <input type="text" id="sehir" class="form-control" @bind-value="@NewEczane.Sehir" />
                </div>
                
                <div style="height: 200px; width: 390px;">
                    <LeafletMap Map="_map" />
                </div>

                <div class="form-group">
                    <label for="lat">Lat</label>
                    <input type="text" id="lat" class="form-control" @bind="_markerLatLng.Lat" />

                </div>
                <div class="form-group">
                    <label for="long">Long</label>
                    <input type="text" id="long" class="form-control" @bind="_markerLatLng.Lng" />

                </div>
                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info"> Eczane Ekle</button>
                </div>


            </EditForm>
        </div>
        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Guncel Eczane</div>
            <EditForm Model="@UpdateEczane">
                <div class="form-group">
                    <label for="name">Eczane Adı</label>
                    <input type="text" id="name" class="form-control" @bind-value="@UpdateEczane.Name" />
                </div>
                <div class="form-group">
                    <label for="sehir">Bulundugu Sehir</label>
                    <input type="text" id="sehir" class="form-control" @bind-value="@UpdateEczane.Sehir" />
                </div>
                
                <div style="height: 200px; width: 390px;">
                    <LeafletMap Map="_map2" />
                </div>

                <div class="form-group">
                    <label for="lat">Lat</label>
                    <input type="text" id="lat" class="form-control" @bind="_markerLatLng2.Lat" />
                </div>
                <div class="form-group">
                    <label for="long">Long</label>
                    <input type="text" id="long" class="form-control" @bind="_markerLatLng2.Lng" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdateEczaneData"> Eczane Guncelle</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code
{
    private Map _map;
    private Map _map2;

    private LatLng _startAt = new LatLng(39.266284f, 34.919440f);

    private LatLng _markerLatLng = new LatLng { Lat = 39.266284f, Lng = 34.919440f };
    private LatLng _markerLatLng2 = new LatLng { Lat = 39.266284f, Lng = 34.919440f };

    List<Eczane> Eczanes = new List<Eczane>();
    public List<Eczane> EczaneList { get; set; }


    public int pageSize { get; set; }
    public int TotalPages { get; set; }
    public int CurrentPage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await RefreshEczanes();
        var marker = new Marker(_markerLatLng)
        {
            Draggable = true,
            Title = "Marker 1",
            Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng) },
            Tooltip = new Models.Tooltip { Content = "New Eczane LatLong" },
            Icon = new Icon { Url = "https://d29fhpw069ctt2.cloudfront.net/clipart/103790/preview/Location_marker_preview_e469.png", ClassName = "map-icon" }
        };

        var marker2 = new Marker(_markerLatLng2)
        {
            Draggable = true,
            Title = "Marker 2",
            Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng2.Lat, _markerLatLng2.Lng) },
            Tooltip = new Models.Tooltip { Content = "Guncellenecek Eczane LatLong" },
            Icon = new Icon { Url = "https://d29fhpw069ctt2.cloudfront.net/clipart/103790/preview/Location_marker_preview_e469.png", ClassName = "map-icon" }
        };

        _map = new Map(jsRuntime)
        {

            Center = _startAt,
            Zoom = 4.8f
        };


        _map2 = new Map(jsRuntime)
        {

            Center = _startAt,
            Zoom = 4.8f
        };


        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            _map.AddLayer(marker);


        };

        _map2.OnInitialized += () =>
        {
            _map2.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            _map2.AddLayer(marker2);


        };


        marker.OnMove += OnDrag;
        marker.OnMoveEnd += OnDragEnd;

        marker2.OnMove += OnDrag2;
        marker2.OnMoveEnd += OnDragEnd2;

    }

    private void OnDrag(Marker marker, DragEvent evt)
    {
        _markerLatLng = evt.LatLng;
        StateHasChanged();
    }

    private async void OnDragEnd(Marker marker, Event e)
    {
        marker.Position = _markerLatLng;
        marker.Popup.Content = string.Format("I am now at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng);
        await LeafletInterops.UpdatePopupContent(jsRuntime, _map.Id, marker);
    }

    private void OnDrag2(Marker marker, DragEvent evt)
    {
        _markerLatLng2 = evt.LatLng;
        StateHasChanged();
    }

    private async void OnDragEnd2(Marker marker, Event e)
    {
        marker.Position = _markerLatLng2;
        marker.Popup.Content = string.Format("I am now at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng2.Lat, _markerLatLng2.Lng);
        await LeafletInterops.UpdatePopupContent(jsRuntime, _map2.Id, marker);
    }

    private void UpdateEczaneList(int pageNumber)
    {
        CurrentPage = pageNumber;
        EczaneList = Eczanes.Skip(pageNumber * pageSize).Take(pageSize).ToList();
    }

    private void RotaAyar(string yön)
    {
        if (yön == "ilk")
            CurrentPage = 0;
        if (yön == "son")
            CurrentPage = TotalPages - 1;
        if (yön == "önceki" && CurrentPage != 0)
            CurrentPage -= 1;
        if (yön == "sonraki" && CurrentPage != TotalPages - 1)
            CurrentPage += 1;

        UpdateEczaneList(CurrentPage);
    }

    private async Task RefreshEczanes()
    {
        Eczanes = await service.GetEczaneAsync();
        pageSize = 4;
        CurrentPage = 0;

        EczaneList = Eczanes.Take(pageSize).ToList();
        TotalPages = (int)Math.Ceiling(Eczanes.Count() / (decimal)pageSize);
    }

    public Eczane NewEczane { get; set; } = new Eczane();
    private async Task AddNewEczane()
    {
        NewEczane.Lat = _markerLatLng.Lat;
        NewEczane.Long = _markerLatLng.Lng;
        await service.AddEczaneAsync(NewEczane);
        NewEczane = new Eczane();
        await RefreshEczanes();
    }

    Eczane UpdateEczane = new Eczane();

    private void SetEczaneForUpdate(Eczane eczane)
    {
        float latit = Convert.ToSingle(eczane.Lat);
        float longit = Convert.ToSingle(eczane.Long);
        _markerLatLng2.Lat = latit;
        _markerLatLng2.Lng = longit;
        UpdateEczane = eczane;
    }

    private async Task UpdateEczaneData()
    {
        UpdateEczane.Lat = _markerLatLng2.Lat;
        UpdateEczane.Long = _markerLatLng2.Lng;
        await service.UpdateEczaneAsync(UpdateEczane);
        await RefreshEczanes();
    }

    private async Task DeleteEczane(Eczane eczane)
    {
        await service.DeleteEczaneAsync(eczane);
        await RefreshEczanes();
    }

}