@page "/"
@using System.Drawing
@using BlazorLeaflet.Models
@using BlazorLeaflet.Models.Events
@inject EczaneServices EczaneService
@inject IJSRuntime jsRuntime

@inject BlazorLeaflet.Samples.Data.EczaneServices service
<h1>Blazor Leaflet</h1>

<div class="form-inline m-2">
    <div class="form-group mb-2">
        <label>Search Eczane Name: </label>
        <input class="form-control ml-2 mr-2" placeholder="Eczane Name" @bind="EczaneName" />
    </div>
    <button class="btn btn-primary mb-2" @onclick="FindEczane">Search</button>
    <button class="btn btn-primary mb-2" @onclick="CleanMapMarker">Markers Clean</button>

</div>

<div style="height: 500px; width: 500px;">
    <LeafletMap Map="_map" />
</div>
<br>
<div class="form-inline m-2">
    <div class="form-group mb-2">
        <label>Search Eczane City Name: </label>
        <input class="form-control ml-2 mr-2" placeholder="Eczane City Name" @bind="EczaneCityName" />
    </div>
    <button class="btn btn-primary mb-2" @onclick="FindCityEczane">Search</button>
    <button class="btn btn-primary mb-2" @onclick="UpdateMapMarker">All Eczane</button>
</div>
<br>
<div class="form-inline m-2">
    <div class="form-group mb-2">
        <label>Konumunu gir: </label>
        <input class="form-control ml-2 mr-2" placeholder="Lat" @bind="_markerLatLng.Lat" />
        <input class="form-control ml-2 mr-2" placeholder="Long" @bind="_markerLatLng.Lng" />
    </div>
    @*<button class="btn btn-primary mb-2" @onclick="Konumunuİsaretle">Kendi Konumum</button>*@
    <button class="btn btn-primary mb-2" @onclick="EnYakınEczane">En Yakın Eczane</button>
</div>




@code
{
    private Map _map;

    private LatLng _startAt = new LatLng(39.266284f, 34.919440f);

    private LatLng _markerLatLng = new LatLng { Lat = 39.266284f, Lng = 34.919440f };
  

    List<Eczane> Eczanes = new List<Eczane>();


    private async Task UpdateMapMarker()
    {

        Eczanes = await service.GetEczaneAsync();

        if (Eczanes.Any())
        {
            foreach (var eczane in Eczanes)
            {
                var LatLong = new LatLng(float.Parse(eczane.Lat.ToString()), float.Parse(eczane.Long.ToString()));
                var marker = new Marker(LatLong)
                {

                    Draggable = false,
                    Title = eczane.Name,
                    Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLong.Lat, LatLong.Lng) },
                    Tooltip = new Models.Tooltip { Content = eczane.Name + " " + "Eczanesi" }
                };

                _map.AddLayer(marker);
            }
        }
    }

    private void CleanMapMarker()
    {
        int marksayac = 0;
        foreach (var markers in _map.GetLayers())
        {
            if (marksayac != 0 && marksayac!= 1)
            {
                _map.RemoveLayer(markers);
            }
            marksayac++;
        }
    }



    protected override void OnInitialized()
    {
        var marker = new Marker(_markerLatLng)
        {
            Draggable = true,
            Title = "BenimKonum",
            Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng) },
            Tooltip = new Models.Tooltip { Content = "Benim Konumum" },
            Icon = new Icon { Url = "https://d29fhpw069ctt2.cloudfront.net/clipart/103790/preview/Location_marker_preview_e469.png", ClassName = "map-icon" }
        };

        _map = new Map(jsRuntime)
        {
            Center = _startAt,
            Zoom = 4.8f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            _map.AddLayer(marker);


        };

        
        marker.OnMove += OnDrag;
        marker.OnMoveEnd += OnDragEnd;


    }

    private void OnDrag(Marker marker, DragEvent evt)
    {
        _markerLatLng = evt.LatLng;
        StateHasChanged();
    }

    private async void OnDragEnd(Marker marker, Event e)
    {
        marker.Position = _markerLatLng;
        marker.Popup.Content = string.Format("I am now at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng);
        await LeafletInterops.UpdatePopupContent(jsRuntime, _map.Id, marker);
    }


    public float latit { get; set; }
    public float Longit { get; set; }

    //private void Konumunuİsaretle()
    //{
    //    int marksayac = 0;
    //    foreach (var markers in _map.GetLayers())
    //    {
    //        if (marksayac != 0)
    //        {
    //            if (markers.Tooltip.Content == "Benim Konumum")
    //            {
    //                _map.RemoveLayer(markers);
    //            }
    //        }
    //        marksayac++;
    //    }

    //    var LatLong = new LatLng(_markerLatLng.Lat, _markerLatLng.Lng);
    //    var marker = new Marker(LatLong)

    //    {

    //        Draggable = false,
    //        Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLong.Lat, LatLong.Lng) },
    //        Tooltip = new Models.Tooltip { Content = "Benim Konumum" },
    //        Icon = new Icon { Url= "https://d29fhpw069ctt2.cloudfront.net/clipart/103790/preview/Location_marker_preview_e469.png", ClassName = "map-icon" }

    //    };

    //    _map.AddLayer(marker);

    //}

    private async Task EnYakınEczane()
    {
        Eczanes = await service.GetEczaneAsync();
        CleanMapMarker();

        float minlat = 0;
        float minlong = 0;
        float minlatlongtop = 0;
        int marksayac = 0;
        float latfark;
        float longfark;
        string eczaneName = "0";
        float latlongfarktop = 0;

        foreach (var eczane in Eczanes)
        {

            if (marksayac == 0)
            {
                minlat = Math.Abs(_markerLatLng.Lat - float.Parse(eczane.Lat.ToString()));
                minlong = Math.Abs(_markerLatLng.Lng - float.Parse(eczane.Long.ToString()));
                minlatlongtop = minlat + minlong;
                eczaneName = eczane.Name;

            }
            else
            {
                latfark = Math.Abs(_markerLatLng.Lat - float.Parse(eczane.Lat.ToString()));
                longfark = Math.Abs(_markerLatLng.Lng - float.Parse(eczane.Long.ToString()));
                latlongfarktop = latfark + longfark;
                if(minlatlongtop> latlongfarktop)
                {
                    minlatlongtop = latlongfarktop;
                    eczaneName = eczane.Name;
                }


            }
            marksayac++;

        }
        foreach (var eczane in Eczanes)
        {
            if (eczane.Name == eczaneName)
            {
                var LatLong = new LatLng(float.Parse(eczane.Lat.ToString()), float.Parse(eczane.Long.ToString()));
                var marker = new Marker(LatLong)
                {
                    Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLong.Lat, LatLong.Lng) },
                    Tooltip = new Models.Tooltip { Content = eczane.Name + " " + "Eczanesi" }
                };

                _map.AddLayer(marker);

            }
        }
        //var LatLong2 = new LatLng(_markerLatLng.Lat, _markerLatLng.Lng);
        //var marker2 = new Marker(LatLong2)

        //{

        //    Draggable = false,
        //    Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLong2.Lat, LatLong2.Lng) },
        //    Tooltip = new Models.Tooltip { Content = "Benim Konumum" },
        //    Icon = new Icon { Url = "https://d29fhpw069ctt2.cloudfront.net/clipart/103790/preview/Location_marker_preview_e469.png", ClassName = "map-icon" }

        //};

        //_map.AddLayer(marker2);

    }


    public string EczaneName { get; set; }

    private void FindEczane()
    {

        CleanMapMarker();

        var eczane = EczaneService.FindEczane(EczaneName);
        if (eczane != null)
        {
            var LatLong = new LatLng(float.Parse(eczane.Lat.ToString()), float.Parse(eczane.Long.ToString()));
            var marker = new Marker(LatLong)
            {
                Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLong.Lat, LatLong.Lng) },
                Tooltip = new Models.Tooltip { Content = eczane.Name + " " + "Eczanesi" }
            };

            _map.AddLayer(marker);
        }
    }

    public string EczaneCityName { get; set; }

    private async Task FindCityEczane()
    {
        Eczanes = await service.GetEczaneAsync();
        CleanMapMarker();

        if (Eczanes.Any())
        {
            foreach (var eczane in Eczanes)
            {
                if (eczane.Sehir == EczaneCityName)
                {
                    var LatLong = new LatLng(float.Parse(eczane.Lat.ToString()), float.Parse(eczane.Long.ToString()));
                    var marker = new Marker(LatLong)
                    {

                        Draggable = false,
                        Title = eczane.Name,
                        Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLong.Lat, LatLong.Lng) },
                        Tooltip = new Models.Tooltip { Content = eczane.Name + " " + "Eczanesi" }
                    };

                    _map.AddLayer(marker);
                }
            }

        }
    }

}
